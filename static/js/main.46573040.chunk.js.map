{"version":3,"sources":["components/ButtonItem.js","components/ContainerOne.js","components/Input.js","components/ButtonItemTwo.js","components/Item.js","pages/VeganFood.js","components/OrderForm.js","components/Fetch.js","App.js","serviceWorker.js","index.js"],"names":["ButtonItem","React","Component","props","types","state","results","namesOfProducts","error","products","handleClick","bind","type","productsType","this","filter","product","category","setItems","fetch","then","response","ok","json","Error","parsedJSON","setState","catch","fetchFunction","message","map","index","key","className","onClick","InputTable","data","updateState","e","target","value","onChange","VeganFood","order","prices","total","result","name","price","tot","parseInt","console","log","Input","id","scope","prods","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46573040.chunk.js","sourcesContent":["import React from 'react';\n\nimport ContainerOne from './ContainerOne';\nimport '../all.css';\n\nconst API = 'https://tlakuali-app.herokuapp.com/products';\n\n\nclass ButtonItem extends React.Component {\n    types = [\"Entry\", \"Main Dish\", \"Dessert\", \"Drinks\"];\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      namesOfProducts: [],\n      error: null,\n      products: []\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(type) {\n       const productsType = this.state.results.filter((product) => (type === product.category) );\n    /*   const arrayOfProducts = productsType.forEach(function(element) {\n         console.log(\"nombre: \" + element.name + \" location: \" + element.location.name);\n        })\n       console.log(productsType); */\n      this.props.setItems(productsType);\n  }\n\n\n  fetchFunction() {\n    fetch(API)\n      .then((response) => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('Something went wrong ...');\n          }\n        })\n      //  .then(response => {response.json()})\n      .then(parsedJSON => this.setState({\n        results: parsedJSON\n\n      }))\n\n\n      //.then(api => this.setState({ results: api.results }))\n      .catch(error => this.setState({\n        error\n      }));\n\n  }\n\n  componentDidMount() {\n    this.fetchFunction();\n  }\n\n  render() {\n    const {results, error} = this.state;\n\n    if (error) {\n      return <p> { error.message } </p>;\n    } else {\n\n      return(\n        <div>\n          <ul>\n            {this.types.map((type, index)=> (\n              <li key={index}>\n                <button className = \"myButton\" onClick = {\n                  () => this.handleClick(type) } > { type } { this.category }\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )\n\n    }\n  }\n\n\n}\nexport default ButtonItem;\n","import React from 'react';\nimport VeganFood from '../pages/VeganFood';\nimport ButtonItem from './ButtonItem';\nimport '../all.css';\n\n\nclass ContainerOne extends React.Component{\n\n render(){\n\n    return(\n        <div>\n          <input type = \"text\" value = {this.props.myDataProp}\n              onChange = {this.props.updateStateProp} />\n            <h3>{this.props.myDataProp}</h3>\n        </div>\n    )\n  }\n\n}\n\nexport default ContainerOne;\n","import React from 'react';\n\nclass InputTable extends React.Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         data: ''\n      }\n      this.updateState = this.updateState.bind(this);\n   };\n   updateState(e) {\n      this.setState({data: e.target.value});\n   }\n   render() {\n      return (\n         <div>\n            <input type = \"text\" value = {this.state.data}\n               onChange = {this.updateState} />\n          <p>Cliente:</p>  <h4>{this.state.data}</h4>\n         </div>\n      );\n   }\n}\nexport default InputTable;\n\n\n\n\n\n\n\n\n/*import React from 'react';\n\nclass InputTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n   const Value = this.state.value;\n   console.log(Value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Table:\n          <input type=\"text\" placeholder=\"Nombre del cliente\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input id=\"AddTable\" type=\"submit\" value=\"ok\" className=\"InputButtom\" />\n        <a href=\"#Cont2\"></a>\n      </form>\n    );\n  }\n}\n\nexport default InputTable;*/\n","import React from 'react';\n\nimport ContainerOne from './ContainerOne';\nimport '../all.css';\n\n\n\nclass ButtonItemTwo extends React.Component {\n\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      namesOfProducts: [],\n      error: null,\n      products: []\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(type) {\n       const productsType = this.state.results.filter((product) => (type === product.status) );\n       const arrayOfProducts = productsType.forEach(function(element) {\n         console.log(\"nombre: \" + element.name + \" location: \" + element.location.name);\n        })\n       console.log(productsType);\n      this.props.setItems(productsType);\n  }\n\n\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    const {results, error} = this.state;\n\n    if (error) {\n      return <p> { error.message } </p>;\n    } else {\n\n      return(\n        <div className=\"itemsSubmenu\">\n          <ul>\n            {this.state.results.map((result, index)=> (\n                <li key={index}>\n                    <button className=\"buttonsSubmenu myButton myButtonTwo\"\n                      onClick = { () => this.handleClick(result.name)} > {result.name}\n                    </button>\n                  </li>\n                )\n              )\n            }\n          </ul>\n        </div>\n\n      )\n\n    }\n  }\n\n\n\n\n}\nexport default ButtonItemTwo;\n","import React, { Component } from 'react';\n\nclass Item extends Component{\n  constructor(props){\n    super(props);\n    this.itemName = props.itemName;\n    this.itemQuantity = props.itemQuantity;\n    this.itemPrice = props.itemPrice\n  }\n    render(){\n        return (\n            <li>\n              <p>{this.itemName}</p>\n              <p>{this.itemQuantity}</p>\n              <p>{this.itemPrice}</p>\n                <button className=\"remove\">\n                    <i className=\"material-icons\">close</i>\n                </button>\n            </li>\n        )\n    }\n}\n\n\nexport default Item;\n","import React from 'react';\nimport ButtonItem from '../components/ButtonItem';\nimport ContainerOne from '../components/ContainerOne';\nimport ButtonItemTwo from '../components/ButtonItemTwo';\nimport Item from '../components/Item';\nimport InputTable from '../components/Input';\nimport OrderForm from '../components/OrderForm';\nimport FetchApi from '../components/Fetch';\n\nimport '../all.css';\n\n\nclass VeganFood extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [ ],\n      order: [],\n      prices: [],\n      total: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n\n\n  //  this.setItems = this.setItems.bind(this);\n};\n\nsetItems = (results)=> {\n    this.setState({\n      results: results\n    })\n}\n\nhandleClick(result){\n    const { results } = this.state.results;\n\n  //  const price = parseInt(result.price);\n\n    const { order } = this.state;\n      const product = result.name + \" \" + \"$\" + result.price;\n\n    const { prices } = this.state;\n        const price = result.price;\n\n    const { total } = this.state;\n      const tot = parseInt(result.price)+ parseInt(this.state.total);\n\n  //  const newOrder = [];\n    //  const productSelected = newOrder.push(\"'\" + result.name + \"'\" + \",\");\n\n  //  const completeArray = newOrder + this.state.order;\n\n//    const newPrice = [];\n  //    const pricesSelected = newPrice.push(price);\n/*\n    this.setState({\n      order: (this.state.order).concat(newOrder),\n      prices: this.state.prices + newPrice,\n      total: price\n      })\n*/\n\n    this.setState({\n      order: [\n        ...order,\n        product\n\n      ],\n      total: tot\n\n    })\n\n}\n\n  componentDidMount() {\n    const { results } = this.state;\n    console.log({results});\n  }\n\n\n  render(){\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3 className=\"Logo\">TLAKUALI</h3>\n        </header>\n\n        <div>\n            <div className=\"title-Menu\">\n              <p>Menú</p>\n              <nav className=\"Nav\">\n                 <ButtonItem\n                  setItems= { this.setItems }/>\n              </nav>\n            </div>\n\n\n          <div className=\"itemsSubmenu\">\n            <ul className=\"submenu\">\n              {this.state.results.map((result, index)=> (\n                  <li key={index}>\n                      <button className=\"buttonsSubmenu myButton myButtonTwo\"\n                          onClick={ () => this.handleClick(result)}>\n                          {result.name} ${result.price}\n                      </button>\n                    </li>\n                  )\n                )\n              }\n            </ul>\n          </div>\n\n\n          <div className=\"order Cont2\">\n              <h1>VeganFood</h1>\n              <InputTable\n               />\n              <div className=\"orderForm\">\n                  <table id=\"tableOrder\" className=\"table\">\n                      <thead>\n                        <tr>\n                          <th scope=\"col\">Productos</th>\n                        </tr>\n                      </thead>\n\n                      <div>\n                        <ul>\n\n                          {this.state.order.map((prods, index) => (\n                             <li key={index} className=\"table\">\n                                <tbody>\n                                    <td>{prods}</td>\n\n                                </tbody>\n                              </li>\n                            ))}\n                        </ul>\n                      </div>\n\n\n                     <tfoot>\n                        <tr>\n                          <td>TOTAL:</td>\n                          <td id=\"total\">{this.state.total}</td>\n                        </tr>\n                      </tfoot>\n                  </table>\n              </div>\n\n          </div>\n\n        </div>\n      </div>\n\n\n    )\n  }\n}\n\n\nexport default VeganFood;\n","import React from 'react'\nimport '../all.css'\n\n\nclass OrderForm extends React.Component{\n  constructor(props) {\n    super(props);\n      this.product = props.product;\n      this.price = props.price;\n      this.total = props.total;\n     }\n\n\n    render(){\n        return(\n          <div className=\"orderForm\">\n              <table id=\"tableOrder\" class=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Producto</th>\n                      <th scope=\"col\">Precio</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    <tr>{this.product}</tr>\n                    <tr>{this.price}</tr>\n\n                  </tbody>\n\n                 <tfoot>\n                    <tr>\n                      <td>TOTAL:</td>\n                      <td id=\"total\"> {this.total}/ 0.00</td>\n                    </tr>\n                  </tfoot>\n              </table>\n          </div>\n\n\n\n\n\n        )\n    }\n}\nexport default OrderForm;\n\n\n/*\n<div className=\"Comanda\">\n    <h4 id=\"nameClient\" id=\"nameClient\">Cliente:</h4>\n<tboby></tboby>\n<table id=\"tableOrder\" class=\"table\">\n                <thead>\n    <tr>\n        <th>Producto</th>\n        <th>Precio</th>\n        <th>Cant.</th>\n        <th></th>\n    </tr>\n</thead>\n<tbody></tbody>\n<tfoot>\n    <tr>\n        <td>TOTAL:</td>\n        <td id=\"total\">s/ 0.00</td>\n    </tr>\n</tfoot>\n</table>\n</div>\n\n\n*/\n","import React from 'react';\nimport ButtonItemTwo from './ButtonItemTwo';\n\nconst API = 'https://tlakuali-app.herokuapp.com/orders';\n\n\n\nclass FetchApi extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: [],\n      name: [],\n      error: null,\n    };\n    this.myfunction = this.myfunction.bind(this);\n\n  }\n\n  myfunction() {\n    fetch(API)\n      .then(\n         (response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error ('Something went wrong ...');\n        }\n      })\n    //  .then(response => {response.json()})\n      .then(parsedJSON => this.setState( {results: parsedJSON}))\n      //.then(api => this.setState({ results: api.results }))\n      .catch(error => this.setState({ error }));\n  }\n\n\n  componentDidMount() {\n    this.myfunction();\n  }\n\n\nrender() {\n  const { results, error } = this.state;\n\n  if (error) {\n    return <p>{error.message}</p>;\n  } else {\n\n\n  return (\n  /*  <ul>\n      {this.state..map(result => (\n        <li key={result.id}>\n          <ButtonItemTwo  />\n\n        </li>\n      ))}\n    </ul>\n    */\n\n    <div>\n      <button onClick = { () => console.log(this.state.results)}>fetch\n      </button>\n    </div>\n  );\n}\n\n}\n}\n\nexport default FetchApi;\n\n/*\nexport default class FetchApi extends React.Component {\n\n    state = {\n        loading: true,\n        name: null,\n    }\n\nasync componentDidMount() {\nconst url = 'https://rickandmortyapi.com/api/character/';\nconst response = await fetch(url);\nconst data = await response.json();\nthis.setState({name: data.results[0], loading: false });\nconsole.log(data.results[0]);\n    }\n\n    render() {\nif (this.state.loading) {\n    return <div>loading...</div>\n}\n\nif (!this.state.name)\nreturn <div>No es un nombre</div>\n\n return (\n<div>\n    <div>\n    <div>\n        <div>{this.state.name}</div>\n    </div>\n    )}\n    </div>\n        );\n    }\n}\n*/\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport VeganFood from './pages/VeganFood';\n//import FetchApi from './components/Fetch';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n         <Switch>\n            <Route exact path=\"/\" component={VeganFood}/>\n        </Switch>\n        </BrowserRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}